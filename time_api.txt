import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:tmp/mobex/api_services.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('API Call with Delay'),
          leading: GestureDetector(
              onTap: () {
                Apiservices().gettewline();
              },
              child: Icon(Icons.add)),
        ),
        body: ApiData(),
      ),
    );
  }
}

class ApiData extends StatefulWidget {
  @override
  _ApiDataState createState() => _ApiDataState();
}

class _ApiDataState extends State<ApiData> {
  // Function to call API
  Future<List<dynamic>> fetchData() async {
    try {
      // Make the API request and set a 5-second timeout
      final response = await http
          .get(Uri.parse('https://jsonplaceholder.typicode.com/posts'))
          .timeout(Duration(seconds: 5)); // Set timeout to 5 seconds

      // Check for successful response
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);

        // Add a 2-second delay after the API call
        await Future.delayed(Duration(seconds: 2));

        return data;
      } else {
        throw Exception('Failed to load data');
      }
    } on TimeoutException catch (_) {
      // Handle the timeout
      throw Exception('Request timed out');
    } catch (error) {
      // Handle any other errors
      throw Exception('An error occurred: $error');
    }
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<List<dynamic>>(
      future: fetchData(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Center(child: CircularProgressIndicator());
        } else if (snapshot.hasError) {
          return Center(child: Text('Error: ${snapshot.error}'));
        } else {
          return ListView.builder(
            itemCount: snapshot.data?.length ?? 0,
            itemBuilder: (context, index) {
              return ListTile(
                title: Text(snapshot.data![index]['title']),
                subtitle: Text(snapshot.data![index]['body']),
              );
            },
          );
        }
      },
    );
  }
}
